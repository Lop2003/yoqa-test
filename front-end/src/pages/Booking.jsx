import { Button, Card, Typography, message } from "antd";
import { useState, useEffect } from "react";
import moment from "moment";
import "../styles/Home.css";
import Footer from "../components/Footer";
import Navbar from "../components/Navbar";
import reservationService from "../services/reservationService";
import classService from "../services/classService";

const { Title } = Typography;

const Booking = () => {
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showDetails, setShowDetails] = useState([]); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏î "Book Now"
  const userId = localStorage.getItem("user_id");

  useEffect(() => {
    const fetchClasses = async () => {
      try {
        console.log("üì° Fetching all classes...");
        const [classResponse, reservationResponse] = await Promise.all([
          classService.getAllClasses(),
          userId
            ? reservationService.getUserReservations(userId)
            : Promise.resolve({ data: [] }),
        ]);

        if (
          !classResponse ||
          !classResponse.data ||
          !Array.isArray(classResponse.data)
        ) {
          console.error("‚ùå API ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", classResponse);
          message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™ ‚ùå");
          return;
        }

        const reservedClassIds = new Set(
          reservationResponse.data?.map((res) => res.class_id) || []
        );

        setEvents(
          classResponse.data
            .map((event) => ({
              id: event._id,
              title: event.title,
              date: new Date(event.start_time),
              endDate: new Date(event.end_time),
              instructor: event.instructor,
              description: event.description,
              difficulty: event.difficulty,
              reserved: reservedClassIds.has(event._id),
              zoomLink: event.zoom_link,
              roomNumber: event.room_number,
              passcode: event.passcode,
            }))
            .sort((a, b) => b.date - a.date)
        );
      } catch (error) {
        console.error("‚ùå Error fetching classes:", error);
        message.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ ‚ùå");
      } finally {
        setLoading(false);
      }
    };

    fetchClasses();
  }, [userId]);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™
  const handleReserveCourse = async (classId) => {
    if (!userId) {
      message.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‚ùå");
      return;
    }

    try {
      const reservationData = { user_id: userId, class_id: classId };
      const response = await reservationService.createReservation(
        reservationData
      );

      if (response) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô local state
        setEvents((prevEvents) =>
          prevEvents.map((event) =>
            event.id === classId ? { ...event, reserved: true } : event
          )
        );

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô LocalStorage (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä)
        const reservedClassIds =
          JSON.parse(localStorage.getItem("reservedClasses")) || [];
        localStorage.setItem(
          "reservedClasses",
          JSON.stringify([...reservedClassIds, classId])
        );

        message.success("‚úÖ ‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô My Plane.");
      } else {
        message.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
      }
    } catch (error) {
      console.error("Error reserving class:", error);
      message.error("‚ùå ‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
    }
  };
  const colorMap = {
    "RELAXING YOGA (R)": "#789DBC",
    "OFFICE SYNDROME FOR YOGA (O)": "#B99470",
    "HATHA FLOW YOGA (H)": "#C9E9D2",
    "BALANCE YOGA (B)": "#FFE3E3",
    "ASHTANGA YOGA": "#F7DCB9",
    "POWER FLOW YOGA (P)": "#F9F7C9",
    "WHEEL YOGA (W) ": "#E4E0E1",
    "FIT FLOW YOGA (F)": "#FF8787",
  };

  useEffect(() => {
    const fetchClasses = async () => {
      try {
        console.log("üì° Fetching all classes...");
        const [classResponse, reservationResponse] = await Promise.all([
          classService.getAllClasses(),
          userId
            ? reservationService.getUserReservations(userId)
            : Promise.resolve({ data: [] }),
        ]);

        if (
          !classResponse ||
          !classResponse.data ||
          !Array.isArray(classResponse.data)
        ) {
          console.error("‚ùå API ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", classResponse);
          message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™ ‚ùå");
          return;
        }

        const reservedClassIds = new Set(
          reservationResponse.data?.map((res) => res.class_id) || []
        );

        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LocalStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
        const reservedClassesInLocalStorage =
          JSON.parse(localStorage.getItem("reservedClasses")) || [];
        setEvents(
          classResponse.data.map((event) => ({
            id: event._id,
            title: event.title,
            date: new Date(event.start_time),
            endDate: new Date(event.end_time),
            instructor: event.instructor,
            description: event.description,
            difficulty: event.difficulty,
            reserved:
              reservedClassIds.has(event._id) ||
              reservedClassesInLocalStorage.includes(event._id), // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LocalStorage ‡∏î‡πâ‡∏ß‡∏¢
            zoomLink: event.zoom_link,
            roomNumber: event.room_number,
            passcode: event.passcode,
          }))
          // Remove the sort operation to keep original API order
        );
      } catch (error) {
        console.error("‚ùå Error fetching classes:", error);
        message.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ ‚ùå");
      } finally {
        setLoading(false);
      }
    };

    fetchClasses();
  }, [userId]);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î "Book now"
  const handleShowDetails = (classId) => {
    setShowDetails((prev) => [...prev, classId]); // ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ô state
  };

  return (
    <div
      className="min-h-screen flex flex-col bg-gradient-to-b"
      style={{
        background:
          "linear-gradient(to bottom, #FEADB4 10%, #FFFFFF 56%, #B3A1DD 100%)",
      }}
    >
      <Navbar />
      <div className="flex-grow flex items-center justify-center mt-4 mb-4">
        <div className="w-full max-w-5xl p-8 rounded-2xl shadow-md bg-white">
          <Title level={3} className="text-purple-700">
            Class Booking
          </Title>

          {loading ? (
            <p className="text-center text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™...</p>
          ) : events.length === 0 ? (
            <p className="text-center text-gray-500">
              ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ
            </p>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
              {events.map((event) => (
                <Card
                  key={event.id}
                  className="p-4 rounded-lg shadow-md"
                  title={event.title}
                  style={{
                    backgroundColor: colorMap[event.title] || "white", // Default to white if no match
                  }}
                >
                  <p>
                    <strong>‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô:</strong> {event.instructor}
                  </p>
                  <p>
                    <strong>üïí ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:</strong>{" "}
                    {moment(event.date).format("MMMM Do YYYY, HH:mm")}
                  </p>
                  <p>
                    <strong>‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:</strong>{" "}
                    {moment(event.endDate).format("MMMM Do YYYY, HH:mm")}
                  </p>
                  <p>
                    <strong>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</strong> {event.description}
                  </p>
                  <p>
                    <strong>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å:</strong>{" "}
                    <span className="text-red-500 text-lg">
                      {"‚ù§Ô∏è".repeat(event.difficulty)}
                    </span>
                  </p>
                  <p>
                    <strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°:</strong>{" "}
                    <span className="text-red-500 text-lg">{event.amount}</span>
                  </p>

                  {/* ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏î Book now */}
                  {event.reserved || showDetails.includes(event.id) ? (
                    <>
                      <p>
                        <strong>üìå Room Number:</strong>{" "}
                        <span className="text-purple-600">
                          {event.roomNumber}
                        </span>
                      </p>
                      <p>
                        <strong>üîë Passcode:</strong>{" "}
                        <span className="text-purple-600">
                          {event.passcode}
                        </span>
                      </p>
                      <p>
                        <strong>üîó Zoom Link:</strong>
                        <a
                          href={event.zoomLink}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-600 underline"
                        >
                          Join Zoom Class
                        </a>
                      </p>
                    </>
                  ) : null}

                  {/* ‚úÖ ‡∏Ç‡∏¢‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡∏°‡∏≤‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                  <div className="mt-4 text-center">
                    {event.reserved ? (
                      <span className="text-green-500 font-semibold">
                        ‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‚úÖ
                      </span>
                    ) : userId ? (
                      <Button
                        type="primary"
                        className="bg-purple-600 text-white"
                        onClick={() =>
                          handleReserveCourse(event.id) &&
                          handleShowDetails(event.id)
                        }
                      >
                        Book now
                      </Button>
                    ) : (
                      <span className="text-gray-500 font-semibold">
                        üîí ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≠‡∏á
                      </span>
                    )}
                  </div>
                </Card>
              ))}
            </div>
          )}
        </div>
      </div>
      <Footer />
    </div>
  );
};

export default Booking;
