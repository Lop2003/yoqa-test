import {
  Button,
  Card,
  Typography,
  message,
  Modal,
  Tag,
  Tooltip,
  Alert,
} from "antd";
import { useState, useEffect } from "react";
import moment from "moment";
import "moment/locale/th";
import "../styles/Home.css";
import Footer from "../components/Footer";
import Navbar from "../components/Navbar";
import reservationService from "../services/reservationService";
import classService from "../services/classService";
import { getUserById } from "../services/userService";
import {
  validateAndGetUserFromToken,
  getUserFullName,
  isUserInParticipants,
} from "../utils/tokenUtils";
import { InfoCircleOutlined } from "@ant-design/icons";

const { Title, Text } = Typography;

const Booking = () => {
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showDetails, setShowDetails] = useState([]);
  const [userInfo, setUserInfo] = useState(null);
  const [currentUser, setCurrentUser] = useState(null);

  useEffect(() => {
    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ token р╣Бр╕ер╕░р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
    const userFromToken = validateAndGetUserFromToken();
    if (userFromToken) {
      setCurrentUser(userFromToken);
      fetchData(userFromToken.userId);
    } else {
      // р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ р╣Бр╕Хр╣Ир╣Гр╕лр╣Йр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕ер╕▓р╕кр╣Др╕Фр╣Й
      fetchData(null);
    }
  }, []);

  const fetchData = async (userId) => {
    try {
      setLoading(true);

      // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕ер╕▓р╕кр╣Бр╕ер╕░р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Юр╕гр╣Йр╕нр╕бр╕Бр╕▒р╕Щ
      const [classResponse, userResponse] = await Promise.all([
        classService.getAllClasses(),
        userId ? getUserById(userId) : Promise.resolve(null),
      ]);

      if (userResponse && userResponse.user) {
        setUserInfo(userResponse.user);
      }

      if (
        !classResponse ||
        !classResponse.data ||
        !Array.isArray(classResponse.data)
      ) {
        console.error("тЭМ API р╣Др╕бр╣Ир╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З:", classResponse);
        message.error("р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕нр╕гр╣Мр╕к тЭМ");
        setLoading(false);
        return;
      }

      // р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕ер╕▓р╕кр╕Чр╕╡р╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Бр╕кр╕Фр╕Зр╕Ьр╕е
      const userFullName = getUserFullName();

      setEvents(
        classResponse.data.map((event) => {
          const participants = Array.isArray(event.participants)
            ? event.participants
            : [];

          // р╣Гр╕Кр╣Йр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Гр╕лр╕бр╣Ир╣Гр╕Щр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ (р╣Ар╕Йр╕Юр╕▓р╕░р╣Ар╕бр╕╖р╣Ир╕нр╕бр╕╡ user)
          const isReserved = userFullName
            ? isUserInParticipants(participants, userFullName)
            : false;

          return {
            id: event._id,
            title: event.title,
            date: new Date(event.start_time),
            endDate: new Date(event.end_time),
            instructor: event.instructor,
            description: event.description,
            difficulty: event.difficulty,
            reserved: isReserved,
            zoomLink: event.zoom_link,
            roomNumber: event.room_number,
            passcode: event.passcode,
            amount: event.amount || 0,
            color: event.color,
            participants: participants,
          };
        })
      );
    } catch (error) {
      console.error("тЭМ Error fetching classes:", error);
      message.error("р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕нр╕гр╣Мр╕кр╣Др╕Фр╣Й тЭМ");
    } finally {
      setLoading(false);
    }
  };

  // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ир╕нр╕Зр╕Др╕ер╕▓р╕кр╣Др╕Фр╣Йр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
  const canBookClasses = () => {
    // р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╣Др╕Фр╣Йр╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ
    if (!userInfo || !currentUser) return false;

    const { remaining_session, sessions_expiry_date } = userInfo;

    if (remaining_session <= 0) return false;

    if (
      sessions_expiry_date &&
      moment(sessions_expiry_date).isBefore(moment())
    ) {
      return false;
    }

    return true;
  };

  // р╣Бр╕кр╕Фр╕Зр╕зр╕▒р╕Щр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Бр╕Ър╕Ър╕ар╕▓р╕йр╕▓р╣Др╕Чр╕в
  const formatExpiryDate = (date) => {
    if (!date) return null;

    moment.locale("th");
    const expiryDate = moment(date).endOf("day");
    const now = moment().startOf("day");

    if (expiryDate.isBefore(now)) {
      return <Tag color="red">р╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Бр╕ер╣Йр╕з</Tag>;
    }

    const daysLeft = expiryDate.diff(now, "days");
    const thaiDate =
      moment(date).format("D MMMM") +
      " " +
      (parseInt(moment(date).format("YYYY")) + 543);

    const text =
      daysLeft <= 7 ? `р╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Гр╕Щ ${daysLeft} р╕зр╕▒р╕Щ` : `р╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╕зр╕▒р╕Щр╕Чр╕╡р╣И ${thaiDate}`;

    return <Tag color={daysLeft <= 7 ? "warning" : "success"}>{text}</Tag>;
  };

  // р╣Бр╕кр╕Фр╕Зр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕лр╕ер╕▒р╕Зр╕Ир╕нр╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И
  const showGuidelinesPopup = () => {
    Modal.success({
      title: "р╕Ир╕нр╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И! р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╣Гр╕Щр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Эр╕╢р╕Б ЁЯзШЁЯП╗тАНтЩАя╕П",
      content: (
        <div style={{ maxHeight: "400px", overflow: "auto" }}>
          <p>ЁЯСЙЁЯП╗ р╕Бр╣Ир╕нр╕Щр╣Ар╕гр╕┤р╣Ир╕бр╕Др╕ер╕▓р╕кр╕Зр╕Фр╕Бр╕▓р╕гр╕гр╕▒р╕Ър╕Ыр╕гр╕░р╕Чр╕▓р╕Щр╕нр╕▓р╕лр╕▓р╕г 1-2 р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З</p>
          <p>
            ЁЯСЙЁЯП╗ р╕Чр╕╕р╕Бр╕Др╕гр╕▒р╣Йр╕Зр╕Чр╕╡р╣Ир╣Ар╕Вр╣Йр╕▓р╕Эр╕╢р╕Бр╕лр╕▓р╕Бр╕бр╕╡р╣Вр╕гр╕Др╕Ыр╕гр╕░р╕Ир╕│р╕Хр╕▒р╕з р╕нр╕▓р╕Бр╕▓р╕гр╕Ър╕▓р╕Фр╣Ар╕Ир╣Зр╕Ъ р╕Ыр╕гр╕░р╕Ир╕│р╣Ар╕Фр╕╖р╕нр╕Щ р╕Ьр╣Ир╕▓р╕Хр╕▒р╕Ф
            р╕пр╕ер╕п р╣Вр╕Ыр╕гр╕Фр╕гр╕░р╕бр╕▒р╕Фр╕гр╕░р╕зр╕▒р╕Зр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Эр╕╢р╕Бр╣Бр╕ер╕░р╣Ар╕Ыр╕┤р╕Фр╣Др╕бр╕Др╣Мр╣Бр╕Ир╣Йр╕Зр╕Др╕гр╕╣р╣Гр╕Щр╕Др╕ер╕▓р╕кр╕Бр╣Ир╕нр╕Щр╕Др╕ер╕▓р╕кр╣Ар╕гр╕┤р╣Ир╕б
          </p>
          <p>
            ЁЯСЙЁЯП╗ р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕нр╕╕р╕Ыр╕Бр╕гр╕Ур╣Мр╕Лр╕▒р╕Ыр╕Юр╕нр╕гр╣Мр╕Хр╕Кр╣Ир╕зр╕вр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Чр╣Ир╕▓р╣Гр╕лр╣Йр╕Юр╕гр╣Йр╕нр╕б р╕нр╕▓р╕Чр╕┤ р╣Ар╕Кр╕╖р╕нр╕Б р╕Ър╕ер╣Зр╕нр╕Д р╕пр╕ер╕п
          </p>
          <p>
            ЁЯСЙЁЯП╗ р╣Вр╕Ыр╕гр╕Фр╕гр╕░р╕бр╕▒р╕Фр╕гр╕░р╕зр╕▒р╕Зр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Чр╣Ир╕▓ р╣Др╕бр╣Ир╕Бр╕Фр╕Фр╕▒р╕Щр╕Хр╕▒р╕зр╣Ар╕нр╕З р╣Др╕бр╣Ир╕Эр╕╖р╕Щр╕гр╣Ир╕▓р╕Зр╕Бр╕▓р╕вр╕бр╕▓р╕Бр╕Ир╕Щр╣Ар╕Бр╕┤р╕Щр╣Др╕Ы
          </p>
          <p>ЁЯСЙЁЯП╗ р╕Вр╕Ур╕░р╕Эр╕╢р╕Бр╣Др╕бр╣Ир╕Бр╕ер╕▒р╣Йр╕Щр╕ер╕бр╕лр╕▓р╕вр╣Гр╕И р╣Гр╕лр╣Йр╕Ыр╕гр╕▒р╕Ър╕ер╕бр╕лр╕▓р╕вр╣Гр╕Ир╣Ар╕Вр╣Йр╕▓ р╕лр╕▓р╕вр╣Гр╕Ир╕нр╕нр╕Бр╕Хр╕▓р╕бр╕Ыр╕Бр╕Хр╕┤</p>
          <p>
            ЁЯСЙЁЯП╗ р╕Бр╣Ир╕нр╕Щр╕Ир╕Ър╕Др╕ер╕▓р╕кр╣Бр╕Щр╕░р╕Щр╕│р╣Гр╕лр╣Йр╕Щр╕нр╕Щр╕Юр╕▒р╕Бр╣Др╕бр╣Ир╕Щр╕╢р╕Бр╕Др╕┤р╕Фр╕Цр╕╢р╕Зр╕кр╕┤р╣Ир╕Зр╣Гр╕Фр╣Ж р╕Юр╕▒р╕Бр╕Яр╕╖р╣Йр╕Щр╕гр╣Ир╕▓р╕Зр╕Бр╕▓р╕в 1-5
            р╕Щр╕▓р╕Чр╕╡
          </p>
          <p>
            ЁЯСЙЁЯП╗ р╕Ыр╕гр╕░р╕Др╕Ър╣Ар╕вр╣Зр╕Щр╕ар╕▓р╕вр╣Гр╕Щ 24 р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З р╕Ър╕гр╕┤р╣Ар╕зр╕Ур╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕▓р╕Бр╕▓р╕гр╕Ыр╕зр╕Ф р╕Ър╕▓р╕Фр╣Ар╕Ир╣Зр╕Ъ р╕пр╕ер╕п 5-10
            р╕Щр╕▓р╕Чр╕╡ р╕Чр╕│р╕Лр╣Йр╕│р╕Ър╣Ир╕нр╕вр╣Ж р╣Бр╕ер╕░р╕Ыр╕гр╕╢р╕Бр╕йр╕▓р╣Бр╕Юр╕Чр╕вр╣Мр╕Ьр╕╣р╣Йр╣Ар╕Кр╕╡р╣Ир╕вр╕зр╕Кр╕▓р╕Н
          </p>
          <p>
            ЁЯСЙЁЯП╗ р╕Ыр╕гр╕░р╕Др╕Ър╕нр╕╕р╣Ир╕Щр╕лр╕ер╕▒р╕З 24 р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З р╕Ър╕гр╕┤р╣Ар╕зр╕Ур╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕▓р╕Бр╕▓р╕гр╕Ыр╕зр╕Ф р╕Ър╕▓р╕Фр╣Ар╕Ир╣Зр╕Ъ р╕пр╕ер╕п 5-10
            р╕Щр╕▓р╕Чр╕╡ р╕Чр╕│р╕Лр╣Йр╕│р╕Ър╣Ир╕нр╕вр╣Ж р╣Бр╕ер╕░р╕Ыр╕гр╕╢р╕Бр╕йр╕▓р╣Бр╕Юр╕Чр╕вр╣Мр╕Ьр╕╣р╣Йр╣Ар╕Кр╕╡р╣Ир╕вр╕зр╕Кр╕▓р╕Н
          </p>
          <p>
            ЁЯСЙЁЯП╗
            р╕лр╕ер╕▒р╕Зр╕Эр╕╢р╕Бр╣Ар╕кр╕гр╣Зр╕Ир╕Др╣Ир╕нр╕вр╣Жр╕Ир╕┤р╣Кр╕Ър╕Щр╣Йр╕│р╕нр╕╕р╕Ур╕лр╕ар╕╣р╕бр╕┤р╕лр╣Йр╕нр╕Зр╕Ир╕Щр╕Бр╕зр╣Ир╕▓р╕гр╣Ир╕▓р╕Зр╕Бр╕▓р╕вр╕лр╕▓р╕вр╕гр╣Йр╕нр╕вр╕Др╣Ир╕нр╕вр╕Фр╕╖р╣Ир╕бр╕Щр╣Йр╕│р╕Хр╕▓р╕бр╣Ар╕вр╕нр╕░р╣Ж
            р╣Гр╕лр╣Йр╕Вр╕▒р╕Ър╕кр╕▓р╕гр╕Юр╕┤р╕йр╕нр╕нр╕Бр╕Чр╕▓р╕Зр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Ыр╕▒р╕кр╕кр╕▓р╕зр╕░
          </p>
          <p>ЁЯСЙЁЯП╗ р╕Хр╕гр╕зр╕Ир╣Ар╕Кр╣Зр╕Др╕кр╕╕р╕Вр╕ар╕▓р╕Юр╣Ар╕Ыр╣Зр╕Щр╕Ыр╕гр╕░р╕Ир╕│р╕кр╕бр╣Ир╕│р╣Ар╕кр╕бр╕н</p>
          <p>
            ЁЯЩПЁЯП╗ р╕Вр╕нр╕Ър╕Др╕╕р╕Ур╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Ър╕гр╕┤р╕Бр╕▓р╕гр╣Др╕нр╣Бр╕нр╕бр╕Ыр╣Мр╣Вр╕вр╕Др╕░ р╕Вр╕нр╣Гр╕лр╣Йр╕Чр╕╕р╕Бр╕Чр╣Ир╕▓р╕Щр╕кр╕╕р╕Вр╕ар╕▓р╕Юр╕гр╣Ир╕▓р╕Зр╕Бр╕▓р╕вр╣Бр╕Вр╣Зр╕Зр╣Бр╕гр╕З
          </p>
          <p>
            ЁЯЩПЁЯП╗ р╕Вр╕нр╕нр╕Щр╕╕р╕Нр╕▓р╕Хр╕Щр╕│р╕ар╕▓р╕Юр╕Ър╕гр╕гр╕вр╕▓р╕Бр╕▓р╕ир╕Бр╕▓р╕гр╕Эр╕╢р╕Бр╕ер╕Зр╣Ар╕Юр╕И I&apos;amp yoqa : р╣Др╕нр╣Бр╕нр╕бр╕Ыр╣Мр╣Вр╕вр╕Др╕░
            ЁЯЦ╝я╕ПтЭдя╕П
          </p>
        </div>
      ),
      okText: "р╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╣Бр╕ер╣Йр╕з",
      width: 600,
    });
  };

  // р╕Ир╕нр╕Зр╕Др╕нр╕гр╣Мр╕к - р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╣Гр╕лр╣Йр╕нр╕▒р╕Ыр╣Ар╕Фр╕Х state р╕Чр╕▒р╕Щр╕Чр╕╡
  const handleReserveCourse = async (classId) => {
    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ token р╕Бр╣Ир╕нр╕Щр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г
    const userFromToken = validateAndGetUserFromToken();
    if (!userFromToken) {
      message.error("р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ър╕Бр╣Ир╕нр╕Щр╕Чр╕│р╕Бр╕▓р╕гр╕Ир╕нр╕З тЭМ");
      return;
    }

    if (!canBookClasses()) {
      if (
        userInfo?.sessions_expiry_date &&
        moment(userInfo.sessions_expiry_date).isBefore(moment())
      ) {
        message.error("тЭМ р╕Др╕ер╕▓р╕кр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Бр╕ер╣Йр╕з р╕Бр╕гр╕╕р╕Ур╕▓р╕Лр╕╖р╣Йр╕нр╣Вр╕Ыр╕гр╣Вр╕бр╕Кр╕▒р╣Ир╕Щр╣Гр╕лр╕бр╣И");
      } else if (userInfo?.remaining_session <= 0) {
        message.error("тЭМ р╕Др╕╕р╕Ур╣Др╕бр╣Ир╕бр╕╡р╕Ир╕│р╕Щр╕зр╕Щр╕Др╕гр╕▒р╣Йр╕Зр╕Др╕Зр╣Ар╕лр╕ер╕╖р╕н р╕Бр╕гр╕╕р╕Ур╕▓р╕Лр╕╖р╣Йр╕нр╣Вр╕Ыр╕гр╣Вр╕бр╕Кр╕▒р╣Ир╕Щр╣Гр╕лр╕бр╣И");
      } else {
        message.error("тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ир╕нр╕Зр╕Др╕ер╕▓р╕кр╣Др╕Фр╣Й р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕Цр╕▓р╕Щр╕░р╕Бр╕▓р╕гр╣Ар╕Ыр╣Зр╕Щр╕кр╕бр╕▓р╕Кр╕┤р╕Б");
      }
      return;
    }

    try {
      const fullName = getUserFullName();
      if (!fullName) {
        message.error("тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕гр╕░р╕Ър╕╕р╕Хр╕▒р╕зр╕Хр╕Щр╣Др╕Фр╣Й р╕Бр╕гр╕╕р╕Ур╕▓р╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щр╣Гр╕лр╕бр╣И");
        return;
      }

      const reservationData = {
        user_id: userFromToken.userId,
        class_id: classId,
      };

      const response = await reservationService.createReservation(
        reservationData
      );

      if (response) {
        // р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕кр╕Цр╕▓р╕Щр╕░р╕Др╕ер╕▓р╕кр╕Чр╕▒р╕Щр╕Чр╕╡р╣Гр╕Щр╕лр╕Щр╣Йр╕▓р╣Ар╕зр╣Зр╕Ъ
        setEvents((prevEvents) =>
          prevEvents.map((event) =>
            event.id === classId
              ? {
                  ...event,
                  reserved: true,
                  amount: event.amount + 1,
                  participants: [...(event.participants || []), fullName],
                }
              : event
          )
        );

        // р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
        if (userInfo) {
          setUserInfo((prev) => ({
            ...prev,
            remaining_session: Math.max(0, (prev.remaining_session || 0) - 1),
          }));
        }

        handleShowDetails(classId);
        message.success("тЬЕ р╕Ир╕нр╕Зр╕Др╕нр╕гр╣Мр╕кр╕кр╕│р╣Ар╕гр╣Зр╕И!");
        showGuidelinesPopup();

        // р╕гр╕╡р╣Ар╕Яр╕гр╕Кр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
        try {
          const userResponse = await getUserById(userFromToken.userId);
          if (userResponse && userResponse.user) {
            setUserInfo(userResponse.user);
          }
        } catch (userError) {
          console.warn("Failed to refresh user data:", userError);
        }
      } else {
        message.error("тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Ир╕нр╕З р╕Бр╕гр╕╕р╕Ур╕▓р╕ер╕нр╕Зр╣Гр╕лр╕бр╣И");
      }
    } catch (error) {
      console.error("Error reserving class:", error);

      if (error.message && error.message.includes("expired")) {
        message.error("тЭМ р╕Др╕ер╕▓р╕кр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Бр╕ер╣Йр╕з р╕Бр╕гр╕╕р╕Ур╕▓р╕Лр╕╖р╣Йр╕нр╣Вр╕Ыр╕гр╣Вр╕бр╕Кр╕▒р╣Ир╕Щр╣Гр╕лр╕бр╣И");
      } else if (error.message && error.message.includes("session")) {
        message.error("тЭМ р╕Др╕╕р╕Ур╣Др╕бр╣Ир╕бр╕╡р╕Ир╕│р╕Щр╕зр╕Щр╕Др╕гр╕▒р╣Йр╕Зр╕Др╕Зр╣Ар╕лр╕ер╕╖р╕н р╕Бр╕гр╕╕р╕Ур╕▓р╕Лр╕╖р╣Йр╕нр╣Вр╕Ыр╕гр╣Вр╕бр╕Кр╕▒р╣Ир╕Щр╣Гр╕лр╕бр╣И");
      } else {
        message.error("тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ир╕нр╕Зр╕Др╕ер╕▓р╕кр╣Др╕Фр╣Й р╕Бр╕гр╕╕р╕Ур╕▓р╕ер╕нр╕Зр╣Гр╕лр╕бр╣И");
      }
    }
  };

  // р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Ир╕нр╕З - р╣Бр╕Бр╣Йр╣Др╕Вр╕Ыр╕▒р╕Нр╕лр╕▓р╕Бр╕▓р╕гр╕вр╕Бр╣Ар╕ер╕┤р╕Б
  const handleCancelReservation = async (classStartTime, classId) => {
    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ token р╕Бр╣Ир╕нр╕Щр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г
    const userFromToken = validateAndGetUserFromToken();
    if (!userFromToken) {
      message.error("тЭМ р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ър╕Бр╣Ир╕нр╕Щр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г");
      return;
    }

    const fullName = getUserFullName();
    if (!fullName) {
      message.error("тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕гр╕░р╕Ър╕╕р╕Хр╕▒р╕зр╕Хр╕Щр╣Др╕Фр╣Й р╕Бр╕гр╕╕р╕Ур╕▓р╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щр╣Гр╕лр╕бр╣И");
      return;
    }

    try {
      const now = new Date();
      const fiveMinutesBeforeClass = new Date(classStartTime);
      fiveMinutesBeforeClass.setMinutes(
        fiveMinutesBeforeClass.getMinutes() - 5
      );

      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Ар╕зр╕ер╕▓
      if (now >= fiveMinutesBeforeClass) {
        Modal.error({
          title: "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕вр╕Бр╣Ар╕ер╕┤р╕Бр╣Др╕Фр╣Й",
          content:
            "р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Ир╕нр╕Зр╣Др╕Фр╣Йр╕Бр╣Ир╕нр╕Щр╣Ар╕гр╕┤р╣Ир╕бр╕Др╕ер╕▓р╕к 5 р╕Щр╕▓р╕Чр╕╡ р╣Вр╕Лр╕Щр╣Ар╕зр╕ер╕▓р╣Ар╕гр╕┤р╣Ир╕бр╕Др╕ер╕▓р╕кр╕Др╕│р╕Щр╕зр╕Ур╕Ир╕▓р╕Бр╕Ыр╕гр╕░р╣Ар╕Чр╕ир╣Др╕Чр╕вр╕Ыр╕гр╕▒р╕Ър╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Др╕Ыр╕Хр╕▓р╕бр╣Вр╕Лр╕Щр╣Ар╕зр╕ер╕▓р╕Чр╣Йр╕нр╕Зр╕Цр╕┤р╣Ир╕Щр╣Гр╕Щр╣Бр╕Хр╣Ир╕ер╕░р╕Ыр╕гр╕░р╣Ар╕Чр╕ир╣Гр╕лр╣Йр╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤р╣Бр╕ер╣Йр╕зр╕Щр╕░р╕Др╕░",
        });
        return;
      }

      // р╣Бр╕кр╕Фр╕З loading
      const hideLoading = message.loading("р╕Бр╕│р╕ер╕▒р╕Зр╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Ир╕нр╕З...", 0);

      try {
        // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Ир╕нр╕Зр╕Ир╕▓р╕Б API
        const response = await reservationService.getUserReservations(
          userFromToken.userId
        );
        const reservations = response.reservations || [];

        console.log("User reservations:", reservations);
        console.log("Looking for class ID:", classId);
        console.log("User full name:", fullName);

        // р╕лр╕▓ reservation р╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕вр╕Бр╣Ар╕ер╕┤р╕Б - р╣Гр╕Кр╣Йр╕лр╕ер╕▓р╕вр╕зр╕┤р╕Шр╕╡р╣Гр╕Щр╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓
        let reservation = reservations.find(
          (res) =>
            res.class_id &&
            res.class_id._id &&
            res.class_id._id.toString() === classId.toString() &&
            res.status === "Reserved"
        );

        if (!reservation) {
          console.warn(
            "Reservation not found by class_id, trying alternative methods..."
          );

          // р╕зр╕┤р╕Шр╕╡р╕Чр╕▓р╕Зр╣Ар╕ер╕╖р╕нр╕Б: р╕лр╕▓р╕Ир╕▓р╕Бр╕Кр╕╖р╣Ир╕нр╕Др╕ер╕▓р╕кр╣Бр╕ер╕░р╣Ар╕зр╕ер╕▓
          const targetEvent = events.find((e) => e.id === classId);
          if (targetEvent) {
            reservation = reservations.find(
              (res) =>
                res.class_id &&
                res.class_id.title === targetEvent.title &&
                moment(res.class_id.start_time).isSame(
                  moment(classStartTime)
                ) &&
                res.status === "Reserved"
            );
          }
        }

        hideLoading();

        if (!reservation || !reservation._id) {
          console.error("No reservation found:", {
            reservations,
            classId,
            fullName,
          });
          message.error("тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Ир╕нр╕З р╕лр╕гр╕╖р╕нр╕Бр╕▓р╕гр╕Ир╕нр╕Зр╕Цр╕╣р╕Бр╕вр╕Бр╣Ар╕ер╕┤р╕Бр╣Др╕Ыр╣Бр╕ер╣Йр╕з");

          // р╕гр╕╡р╣Ар╕Яр╕гр╕Кр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Бр╕Щр╣Ир╣Гр╕Ир╕зр╣Ир╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╣Ар╕Лр╕┤р╕гр╣Мр╕Яр╣Ар╕зр╕нр╕гр╣М
          fetchData(userFromToken.userId);
          return;
        }

        console.log("Found reservation to cancel:", reservation);

        // р╕кр╣Ир╕Зр╕Др╕│р╕Вр╕нр╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Ир╕нр╕Зр╣Др╕Ыр╕вр╕▒р╕З API
        await reservationService.cancelReservation(reservation._id);

        // р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕кр╕Цр╕▓р╕Щр╕░р╕Др╕ер╕▓р╕кр╕Чр╕▒р╕Щр╕Чр╕╡р╣Гр╕Щр╕лр╕Щр╣Йр╕▓р╣Ар╕зр╣Зр╕Ъ
        setEvents((prevEvents) =>
          prevEvents.map((event) =>
            event.id === classId
              ? {
                  ...event,
                  reserved: false,
                  amount: Math.max(0, event.amount - 1),
                  participants: (event.participants || []).filter((name) => {
                    const normalizedName = name.toLowerCase().trim();
                    const normalizedFullName = fullName.toLowerCase().trim();
                    return (
                      !normalizedName.includes(normalizedFullName) &&
                      !normalizedFullName.includes(normalizedName)
                    );
                  }),
                }
              : event
          )
        );

        // р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
        if (userInfo) {
          setUserInfo((prev) => ({
            ...prev,
            remaining_session: (prev.remaining_session || 0) + 1,
          }));
        }

        // р╕Ыр╕┤р╕Фр╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╕Др╕ер╕▓р╕кр╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╕вр╕Бр╣Ар╕ер╕┤р╕Б
        setShowDetails((prev) => prev.filter((id) => id !== classId));

        message.success("тЬЕ р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Ир╕нр╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И");

        // р╕гр╕╡р╣Ар╕Яр╕гр╕Кр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
        try {
          const userResponse = await getUserById(userFromToken.userId);
          if (userResponse && userResponse.user) {
            setUserInfo(userResponse.user);
          }
        } catch (userError) {
          console.warn("Failed to refresh user data:", userError);
        }
      } catch (apiError) {
        hideLoading();
        throw apiError;
      }
    } catch (error) {
      console.error("тЭМ Error canceling reservation:", error);

      // р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Чр╕╡р╣Ир╣Ар╕Йр╕Юр╕▓р╕░р╣Ар╕Ир╕▓р╕░р╕Ир╕З
      if (error.response && error.response.status === 404) {
        message.error("тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Ир╕нр╕З р╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕╡р╣Ар╕Яр╕гр╕Кр╕лр╕Щр╣Йр╕▓р╣Ар╕зр╣Зр╕Ъ");
        // р╕гр╕╡р╣Ар╕Яр╕гр╕Кр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤
        fetchData(userFromToken.userId);
      } else if (error.response && error.response.status === 401) {
        message.error("тЭМ Session р╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕ р╕Бр╕гр╕╕р╕Ур╕▓р╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щр╣Гр╕лр╕бр╣И");
        // р╕ер╕Ъ token р╣Бр╕ер╕░ redirect р╣Др╕Ыр╕лр╕Щр╣Йр╕▓ login
        localStorage.clear();
        window.location.href = "/auth/signin";
      } else {
        message.error(
          "тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Ир╕нр╕З р╕Бр╕гр╕╕р╕Ур╕▓р╕ер╕нр╕Зр╣Гр╕лр╕бр╣Ир╕лр╕гр╕╖р╕нр╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И"
        );
      }
    }
  };

  // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Ир╕нр╕Зр╣Др╕Фр╣Йр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
  const canCancelReservation = (classStartTime) => {
    const now = new Date();
    const fiveMinutesBeforeClass = new Date(classStartTime);
    fiveMinutesBeforeClass.setMinutes(fiveMinutesBeforeClass.getMinutes() - 5);
    return now < fiveMinutesBeforeClass;
  };

  // р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╣Ар╕бр╕╖р╣Ир╕нр╕Др╕ер╕┤р╕Б "р╕Ир╕нр╕Зр╕Др╕ер╕▓р╕кр╕Щр╕╡р╣Й"
  const handleShowDetails = (classId) => {
    setShowDetails((prev) =>
      prev.includes(classId) ? prev : [...prev, classId]
    );
  };

  // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕Др╕зр╕гр╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
  const shouldShowDetails = (event) => {
    return event.reserved || showDetails.includes(event.id);
  };

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕│р╕лр╕Щр╕Ф tooltip р╣Бр╕ер╕░ disabled status р╕Вр╕нр╕Зр╕Ыр╕╕р╣Ир╕бр╕Ир╕нр╕З
  const getBookingButtonProps = () => {
    if (!currentUser) {
      return {
        disabled: true,
        tooltip: "р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ър╣Ар╕Юр╕╖р╣Ир╕нр╕Ир╕нр╕Зр╕Др╕ер╕▓р╕к",
      };
    }

    if (!canBookClasses()) {
      if (userInfo?.remaining_session <= 0) {
        return {
          disabled: true,
          tooltip: "р╕Др╕╕р╕Ур╣Др╕бр╣Ир╕бр╕╡р╕Ир╕│р╕Щр╕зр╕Щр╕Др╕гр╕▒р╣Йр╕Зр╕Др╕Зр╣Ар╕лр╕ер╕╖р╕н р╕Бр╕гр╕╕р╕Ур╕▓р╕Лр╕╖р╣Йр╕нр╣Вр╕Ыр╕гр╣Вр╕бр╕Кр╕▒р╣Ир╕Щр╣Гр╕лр╕бр╣И",
        };
      }
      if (
        userInfo?.sessions_expiry_date &&
        moment(userInfo.sessions_expiry_date).isBefore(moment())
      ) {
        return {
          disabled: true,
          tooltip: "р╕Др╕ер╕▓р╕кр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Бр╕ер╣Йр╕з р╕Бр╕гр╕╕р╕Ур╕▓р╕Лр╕╖р╣Йр╕нр╣Вр╕Ыр╕гр╣Вр╕бр╕Кр╕▒р╣Ир╕Щр╣Гр╕лр╕бр╣И",
        };
      }
      return {
        disabled: true,
        tooltip: "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ир╕нр╕Зр╕Др╕ер╕▓р╕кр╣Др╕Фр╣Й",
      };
    }

    return {
      disabled: false,
      tooltip: "",
    };
  };

  return (
    <div
      className="min-h-screen flex flex-col bg-gradient-to-b"
      style={{
        background:
          "linear-gradient(to bottom, #FEADB4 10%, #FFFFFF 56%, #B3A1DD 100%)",
      }}
    >
      <Navbar />
      <div className="flex-grow flex items-center justify-center mt-4 mb-4">
        <div className="w-full max-w-5xl p-8 rounded-2xl shadow-md bg-white">
          <div className="flex justify-between items-center mb-4">
            <Title level={3} className="text-purple-700 mb-0">
              р╕Ир╕нр╕Зр╕Др╕ер╕▓р╕кр╣Ар╕гр╕╡р╕вр╕Щ
            </Title>
            {currentUser && (
              <Button
                type="default"
                onClick={() => fetchData(currentUser.userId)}
                loading={loading}
              >
                р╕гр╕╡р╣Ар╕Яр╕гр╕Кр╕Вр╣Йр╕нр╕бр╕╣р╕е
              </Button>
            )}
          </div>

          {/* р╣Бр╕Ър╕Щр╣Ар╕Щр╕нр╕гр╣Мр╣Бр╕кр╕Фр╕Зр╕кр╕Цр╕▓р╕Щр╕░р╕Бр╕▓р╕гр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕ - р╣Ар╕Йр╕Юр╕▓р╕░р╣Ар╕бр╕╖р╣Ир╕нр╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щр╣Бр╕ер╣Йр╕з */}
          {userInfo && currentUser && (
            <div className="mb-6">
              <div className="flex items-center mb-2">
                <Text>
                  р╕Др╕ер╕▓р╕кр╕Др╕Зр╣Ар╕лр╕ер╕╖р╕н:{" "}
                  <strong>{userInfo.remaining_session || 0}</strong>
                </Text>
                {userInfo.sessions_expiry_date && (
                  <div className="ml-4">
                    {formatExpiryDate(userInfo.sessions_expiry_date)}
                  </div>
                )}
              </div>

              {/* Alert messages р╕кр╕│р╕лр╕гр╕▒р╕Ър╕кр╕Цр╕▓р╕Щр╕░р╕Хр╣Ир╕▓р╕Зр╣Ж */}
              {userInfo.sessions_expiry_date &&
                moment(userInfo.sessions_expiry_date).isBefore(moment()) && (
                  <Alert
                    type="error"
                    message="р╕Др╕ер╕▓р╕кр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Бр╕ер╣Йр╕з"
                    description="р╕Др╕╕р╕Ур╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ир╕нр╕Зр╕Др╕ер╕▓р╕кр╣Гр╕лр╕бр╣Ир╣Др╕Фр╣Йр╕Ир╕Щр╕Бр╕зр╣Ир╕▓р╕Ир╕░р╕Лр╕╖р╣Йр╕нр╣Бр╕Юр╣Зр╕Др╣Ар╕Бр╕Ир╣Гр╕лр╕бр╣И"
                    showIcon
                  />
                )}

              {userInfo.sessions_expiry_date &&
                moment(userInfo.sessions_expiry_date).isAfter(moment()) &&
                moment(userInfo.sessions_expiry_date).diff(moment(), "days") <=
                  7 && (
                  <Alert
                    type="warning"
                    message="р╕Др╕ер╕▓р╕кр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╣Гр╕Бр╕ер╣Йр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕"
                    description={`р╕Др╕ер╕▓р╕кр╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕Ир╕░р╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Гр╕Щр╕зр╕▒р╕Щр╕Чр╕╡р╣И ${
                      moment(userInfo.sessions_expiry_date).format("D MMMM") +
                      " " +
                      (parseInt(
                        moment(userInfo.sessions_expiry_date).format("YYYY")
                      ) +
                        543)
                    }`}
                    showIcon
                  />
                )}

              {userInfo.remaining_session <= 0 && (
                <Alert
                  type="warning"
                  message="р╣Др╕бр╣Ир╕бр╕╡р╕Др╕ер╕▓р╕кр╣Ар╕лр╕ер╕╖р╕н"
                  description="р╕Др╕╕р╕Ур╣Др╕бр╣Ир╕бр╕╡р╕Др╕ер╕▓р╕кр╕Др╕Зр╣Ар╕лр╕ер╕╖р╕н р╕Бр╕гр╕╕р╕Ур╕▓р╕Лр╕╖р╣Йр╕нр╣Бр╕Юр╣Зр╕Др╣Ар╕Бр╕Ир╣Гр╕лр╕бр╣И"
                  showIcon
                />
              )}
            </div>
          )}

          {/* р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Бр╕Ир╣Йр╕Зр╣Гр╕лр╣Йр╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щр╣Ар╕Йр╕Юр╕▓р╕░р╣Ар╕бр╕╖р╣Ир╕нр╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Йр╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ъ */}
          {!currentUser && (
            <Alert
              type="info"
              message="р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ър╣Ар╕Юр╕╖р╣Ир╕нр╕Ир╕нр╕Зр╕Др╕ер╕▓р╕к"
              description="р╕Др╕╕р╕Ур╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕ер╕▓р╕кр╣Др╕Фр╣Й р╣Бр╕Хр╣Ир╕Хр╣Йр╕нр╕Зр╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ър╕Бр╣Ир╕нр╕Щр╕Ир╕╢р╕Зр╕Ир╕░р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ир╕нр╕Зр╣Др╕Фр╣Й"
              showIcon
              className="mb-6"
            />
          )}

          <Text>
            р╕Ир╕нр╕Зр╕Др╕ер╕▓р╕кр╣Др╕Фр╣Йр╕Хр╕ер╕нр╕Ф р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Ир╕нр╕Зр╣Др╕Фр╣Йр╕Бр╣Ир╕нр╕Щр╣Ар╕гр╕┤р╣Ир╕бр╕Др╕ер╕▓р╕к 5 р╕Щр╕▓р╕Чр╕╡
            &quot;р╣Вр╕Лр╕Щр╣Ар╕зр╕ер╕▓р╣Ар╕гр╕┤р╣Ир╕бр╕Др╕ер╕▓р╕кр╕Др╕│р╕Щр╕зр╕Ур╕Ир╕▓р╕Бр╕Ыр╕гр╕░р╣Ар╕Чр╕ир╣Др╕Чр╕вр╕Ыр╕гр╕▒р╕Ър╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Др╕Ыр╕Хр╕▓р╕бр╣Вр╕Лр╕Щр╣Ар╕зр╕ер╕▓р╕Чр╣Йр╕нр╕Зр╕Цр╕┤р╣Ир╕Щр╣Гр╕Щр╣Бр╕Хр╣Ир╕ер╕░р╕Ыр╕гр╕░р╣Ар╕Чр╕ир╣Гр╕лр╣Йр╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤р╣Бр╕ер╣Йр╕зр╕Щр╕░р╕Др╕░&quot;
          </Text>

          {loading ? (
            <p className="text-center text-gray-500">р╕Бр╕│р╕ер╕▒р╕Зр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕нр╕гр╣Мр╕к...</p>
          ) : events.length === 0 ? (
            <p className="text-center text-gray-500">
              р╣Др╕бр╣Ир╕бр╕╡р╕Др╕нр╕гр╣Мр╕кр╕Чр╕╡р╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ир╕нр╕Зр╣Др╕Фр╣Й
            </p>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
              {events.map((event) => {
                const bookingProps = getBookingButtonProps();

                return (
                  <Card
                    key={event.id}
                    className="p-4 rounded-lg shadow-md"
                    title={event.title}
                    style={{
                      backgroundColor: event.color
                        ? `#${event.color}`
                        : "white",
                    }}
                  >
                    <p>
                      <strong>р╕Др╕гр╕╣р╕Ьр╕╣р╣Йр╕кр╕нр╕Щ:</strong> {event.instructor}
                    </p>
                    <div className="mb-4 mt-4">
                      <div className="bg-white p-4 rounded-lg shadow-sm">
                        {/* р╣Бр╕кр╕Фр╕Зр╣Ар╕зр╕ер╕▓р╣Гр╕Щр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ р╣Ар╕зр╕ер╕▓р╣Ар╕гр╕┤р╣Ир╕б - р╣Ар╕зр╕ер╕▓р╕Ир╕Ъ */}
                        <p className="text-xl font-bold text-purple-800 flex items-center justify-center mb-2">
                          <span className="text-2xl mr-2">ЁЯХТ</span>
                          <span>
                            {moment(event.date).format("HH:mm")} -{" "}
                            {moment(event.endDate).format("HH:mm")} р╕Щ.
                          </span>
                        </p>

                        {/* р╣Бр╕кр╕Фр╕Зр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╣Гр╕Щр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╣Др╕Чр╕в */}
                        <p className="text-center text-pink-600 font-medium">
                          р╕зр╕▒р╕Щр╕Чр╕╡р╣И{" "}
                          {moment(event.date).locale("th").format("D MMMM ") +
                            (parseInt(moment(event.date).format("YYYY")) + 543)}
                        </p>
                      </div>
                    </div>
                    <p>
                      <strong>р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф:</strong> {event.description}
                    </p>
                    <p>
                      <strong>р╕гр╕░р╕Фр╕▒р╕Ър╕Др╕зр╕▓р╕бр╕вр╕▓р╕Б:</strong>{" "}
                      <span className="text-red-500 text-lg">
                        {"тЭдя╕П".repeat(event.difficulty)}
                      </span>
                    </p>
                    <p>
                      <strong>р╕Ир╕│р╕Щр╕зр╕Щр╕Др╕Щр╣Ар╕Вр╣Йр╕▓р╕гр╣Ир╕зр╕б:</strong>{" "}
                      <span className="text-pink-500 text-lg">
                        {event.amount}
                      </span>
                    </p>
                    <p>
                      <strong>р╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕нр╕Др╕Щр╣Ар╕Вр╣Йр╕▓р╕гр╣Ир╕зр╕б:</strong>{" "}
                      <span className="text-pink-500 text-sm">
                        {event.participants && event.participants.length > 0
                          ? event.participants.join(", ")
                          : "р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡р╕Ьр╕╣р╣Йр╣Ар╕Вр╣Йр╕▓р╕гр╣Ир╕зр╕б"}
                      </span>
                    </p>

                    {/* р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╣Ар╕бр╕╖р╣Ир╕нр╕Ир╕нр╕Зр╣Бр╕ер╣Йр╕зр╕лр╕гр╕╖р╕нр╕лр╕ер╕▒р╕Зр╕Ир╕▓р╕Бр╕Др╕ер╕┤р╕Б "р╕Ир╕нр╕Зр╕Др╕ер╕▓р╕кр╕Щр╕╡р╣Й" - р╣Ар╕Йр╕Юр╕▓р╕░р╣Ар╕бр╕╖р╣Ир╕нр╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щр╣Бр╕ер╣Йр╕з */}
                    {currentUser && shouldShowDetails(event) && (
                      <>
                        <p>
                          <strong>ЁЯУМ р╕лр╣Йр╕нр╕Зр╣Ар╕гр╕╡р╕вр╕Щ:</strong>{" "}
                          <span className="text-purple-600">
                            {event.roomNumber}
                          </span>
                        </p>
                        <p>
                          <strong>ЁЯФС р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ:</strong>{" "}
                          <span className="text-purple-600">
                            {event.passcode}
                          </span>
                        </p>
                        <p>
                          <strong>ЁЯФЧ р╕ер╕┤р╕Зр╕Бр╣М Zoom:</strong>{" "}
                          <a
                            href={event.zoomLink}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-blue-600 underline"
                          >
                            р╣Ар╕Вр╣Йр╕▓р╕гр╣Ир╕зр╕бр╕Др╕ер╕▓р╕кр╕Ьр╣Ир╕▓р╕Щ Zoom
                          </a>
                        </p>
                      </>
                    )}

                    <div className="mt-4 text-center">
                      {event.reserved && currentUser ? (
                        <div>
                          <span className="text-green-500 font-semibold block mb-2">
                            р╕Ир╕нр╕Зр╣Бр╕ер╣Йр╕з тЬЕ
                          </span>
                          {canCancelReservation(event.date) ? (
                            <Button
                              danger
                              onClick={() =>
                                handleCancelReservation(event.date, event.id)
                              }
                            >
                              р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Ир╕нр╕З
                            </Button>
                          ) : (
                            <span className="text-red-500 text-sm block">
                              р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕вр╕Бр╣Ар╕ер╕┤р╕Бр╣Др╕Фр╣Й (р╣Ар╕лр╕ер╕╖р╕нр╕Щр╣Йр╕нр╕вр╕Бр╕зр╣Ир╕▓ 5
                              р╕Щр╕▓р╕Чр╕╡р╕Бр╣Ир╕нр╕Щр╣Ар╕гр╕┤р╣Ир╕бр╕Др╕ер╕▓р╕к)
                            </span>
                          )}
                        </div>
                      ) : (
                        <Tooltip title={bookingProps.tooltip}>
                          <Button
                            type="primary"
                            className="bg-purple-600 text-white"
                            onClick={() => handleReserveCourse(event.id)}
                            disabled={bookingProps.disabled}
                          >
                            {!currentUser
                              ? "р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ър╣Ар╕Юр╕╖р╣Ир╕нр╕Ир╕нр╕З"
                              : "р╕Ир╕нр╕Зр╕Др╕ер╕▓р╕кр╕Щр╕╡р╣Й"}
                          </Button>
                        </Tooltip>
                      )}
                    </div>
                  </Card>
                );
              })}
            </div>
          )}
        </div>
      </div>
      <Footer />
    </div>
  );
};

export default Booking;
